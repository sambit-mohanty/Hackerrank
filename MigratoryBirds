//https://www.hackerrank.com/challenges/migratory-birds/problem

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'migratoryBirds' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static int migratoryBirds(List<Integer> birds) {
    // Write your code here
    
            HashMap<Integer, Long> map = new HashMap<>();
        int i = 1;
        while (i != -1) {
            Long count = Long.valueOf(Collections.frequency(birds, i));
            map.put(i, count);
            i++;
            if (i == 6) {
                i = -1;
            }
        }
        Collection<Long> frequencies = map.values();
        Long maxFrequency = Collections.max(frequencies);
        List<Integer> minBird = new ArrayList<Integer>();
        for (int j = 0; j < map.keySet().size(); j++) {
            if (map.get(j + 1) == maxFrequency) {
                minBird.add(j + 1);
            }
        }

        return Collections.min(minBird);


    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
